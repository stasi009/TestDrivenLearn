package test

import org.scalatest.Spec

sealed class ArrayTest extends Spec {
  
  object `array equality` {
    
    // since Array still uses the default "equals"
    // so "==" still checks on "reference equality"
    // test whether two names points to the same object or not
    def `default ==` = {
      val original = Array(1,2,3)
      val sameRef = original
      val sameContent = Array(1,2,3)
      
      assert(original == sameRef)
      assert(original != sameContent)
    }
    
    def `eq and equals` = {
      val original = Array(1,2,3)
      val sameRef = original
      val sameContent = Array(1,2,3)
      
      assert(original eq sameRef)
      assert(original equals sameRef)
      assert(! (original equals sameContent ))
    }
    
    def `check sameElements` = {
      val original = Array(1,2,3)
      val sameElem_sameOrder = Array(1,2,3)
      val sameElem_diffOrder = Array(3,2,1)
      
      // not the same object
      assert(original != sameElem_sameOrder)
      // true, when same elements in same order
      assert(original sameElements sameElem_sameOrder)
      // false, when same elements but different order
      assert(!(original sameElements sameElem_diffOrder))
    }
  }// equality check on array

}