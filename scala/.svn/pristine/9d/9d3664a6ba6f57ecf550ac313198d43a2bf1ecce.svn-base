package test

import org.scalatest.Spec

sealed class FunctionalOperatorsTest extends Spec {

  object `test operators` {

    def `count, forall, exists` = {
      val a = Array(1, 9, 8, 6, 4, 3, 0)

      assertResult(4) { a count { _ % 2 == 0 } }
      assert(!(a forall { _ % 2 == 0 }))
      assert(a forall { _ >= 0 })

      assert(a exists { _ % 2 == 0 })
      assert(!(a exists { _ < 0 }))
    } //def
    
    def `take, drop, split` = {
      val sq = Array(1, 9, 8, 6, 4, 3, 0)
      
      assertResult(Seq(1,9))(sq take 2)
      assertResult(Seq(8,6,4,3,0))(sq drop 3)
    }

    def `test zip` = {
      // segments can have different length
      // zipped result has the shortest length among segments
      val ids = Seq(1, 2, 3, 4)
      val names = Seq("a", "b", "c")

      assertResult(Seq((1, "a"), (2, "b"), (3, "c")))(ids zip names)
    } //def

    def `test map` = {
      assertResult(Seq("1", "2", "3")) { (1 to 3) map { _.toString } }
    }

    def `test filter` = {
      val actual = (1 to 10) filter { _ % 2 == 0 }
      val expected = Seq(2, 4, 6, 8, 10)
      assertResult(expected)(actual)
    }

    def `test fold 1` = {
      val sbFromLeft = (1 to 5).foldLeft(new StringBuilder) { (sb, n) => sb ++= n.toString }
      assertResult("12345")(sbFromLeft.toString)

      val sbFromRight = (1 to 5).foldRight(new StringBuilder) { (n, sb) => sb ++= n.toString }
      assertResult("54321")(sbFromRight.toString)
    }

    def `test fold 2` = {
      val sbFromLeft = ((new StringBuilder) /: (1 to 5)) { (sb, n) => sb ++= n.toString }
      assertResult("12345")(sbFromLeft.toString)

      val sbFromRight = (((1 to 5) :\ new StringBuilder)) { (n, sb) => sb ++= n.toString }
      assertResult("54321")(sbFromRight.toString)
    }

    /*
     * the difference between reduce and fold is that
     * fold can accept a user-defined initial state
     * while reduce use the first element as the initial state
     */
    def `test reduce 1` = {
      val sumleft = (1 to 5) reduceLeft { _ + _ }
      assertResult(15)(sumleft)

      val sumright = (1 to 5) reduceRight { _ + _ }
      assertResult(15)(sumright)
    }

    def `test sort` = {
      val txts = Seq("abc", "xy")

      // default sort, sort by alphabetic order
      assertResult(Seq("abc", "xy")) { txts.sorted }

      // user-defined sort
      assertResult(Seq("xy", "abc")) { txts.sortBy(_.length) }
      assertResult(Seq("abc", "xy")) { txts.sortWith { _.length > _.length } }
    }

  } //object

}









