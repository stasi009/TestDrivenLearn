package demo

import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.ObjectInputStream
import java.io.ObjectOutputStream

object SerializeDemo extends App {

  def serialize(src: Any) = {
    val byteOutStream = new ByteArrayOutputStream
    val objOutStream = new ObjectOutputStream(byteOutStream)
    objOutStream.writeObject(src)
    byteOutStream.toByteArray
  } //def

  def serializeArray() = {
    val src = Array(1 to 1000: _*)
    val bytearray = serialize(src)
    println(s"${src.length} integers serialize to ${bytearray.length} bytes")

    // each integer occupies 4 bytes
    val expected = 4 * src.length + 27
    assert(bytearray.length == expected)
  } //def

  def temp() = {
    val number = 99

    val byteOutStream = new ByteArrayOutputStream
    val objOutStream = new ObjectOutputStream(byteOutStream)
    
    objOutStream.reset()
    objOutStream.writeObject(number)

    var bytearray = byteOutStream.toByteArray
    println(s"----------------${bytearray.length}")

    val cpybytearray = new Array[Byte](128)
    bytearray.copyToArray(cpybytearray, 0)
    
    bytearray = cpybytearray

    val byteInStream = new ByteArrayInputStream(bytearray)
    val objInStream = new ObjectInputStream(byteInStream)
    val cpy = objInStream.readObject().asInstanceOf[Int]

    println(cpy)
  }

  override def main(args: Array[String]) = {
    // serializeArray()
    temp()
  } //def

}