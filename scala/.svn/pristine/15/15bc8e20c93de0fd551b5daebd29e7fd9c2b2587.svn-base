package demo

object PatternMatchDemo extends App {

  object Student {
    def unapply(msg: String) = {
      val parts = msg.split(",")
      if (parts.length == 3) Some(parts(0), parts(1), parts(2))
      else None
    } //def
  } //extractor object

  // how to write "silent ignore" in pattern match
  def demoIgnore() = {
    val students = Seq(
      "B123456,Justin,Kaohsiung",
      "B98765,Monica,Kaohsiung",
      "xxxxxxxxxxxxxxxxxxxxx",
      "B246819,Bush,Taipei")

    students.foreach(_ match {
      case Student(nb, name, addr) => println(nb + ", " + name + ", " + addr)
      case _ => // silently ignore "not matched"
    })
  }

  object Uppercase {
    def unapplySeq(s: String) = {
      Some(for (c <- s.toArray if c.isUpper) yield c)
    }
  }

  def demoUnapplySeq() = {
    val Uppercase(u1 @ _*) = "This is Justin"
    u1.foreach(print) // TL

    val Uppercase(u2 @ _*) = "'JL' stands for Justin Lin"
    u2.foreach(print) // TJJLJL 
  }

  override def main(args: Array[String]) = {
    demoIgnore()
  }

}