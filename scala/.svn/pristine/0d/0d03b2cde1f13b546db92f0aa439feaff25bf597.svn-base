package test

import org.scalatest.Spec

sealed class ImmutableSeqTest extends Spec {
  
  object `common api usage` {
    
    def `zip and unzip` = {
      val v1 = Seq(1,2,3)
      val v2 = Seq("x","y","z")
      
      // -------------- zip
      val zipped = v1 zip v2
      val expected =  Seq((1,"x"),(2,"y"),(3,"z"))
      assertResult( expected ) (zipped)
      
      // -------------- unzip
      // !!! pay attention that, since unzip has an implicit argument
      // !!! we cannot call like "x unzip"
      // !!! we must call like "x.unzip"
      // otherwise, there will be syntax error when decomposing the result tuple
      val (member1,member2) = zipped.unzip
      assert(member1 == v1)
      assert(member2 == v2)
    }
    
    def `test mkstring` = {
      val s = Seq(1,2,3)
      assertResult("123")( s.mkString )
      assertResult("1, 2, 3")( s.mkString(", ") )
    }
  }
  
  object `Seq, LinearSeq, IndexedSeq objects` {
    def `default implementation` = {
      
      // Seq defaults to List
      val aseq = Seq(1,2,3)
      assert(aseq.isInstanceOf[List[Int]])
      
      // IndexedSeq defaults to Vector
      val aindexseq = IndexedSeq(1,2,3)
      assert(aindexseq.isInstanceOf[Vector[Int]])
      
      // LinearSeq also defaults to List
      // it seems that "LinearSeq" is not exposed by Predef
      val alinearseq = collection.mutable.LinearSeq(1,2,3)
      assert(alinearseq.isInstanceOf[List[Int]])
      
    }
  }

}