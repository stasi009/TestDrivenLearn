package test

import org.scalatest.Spec

sealed class CallByNameTest extends Spec {

  object `call by name` {

    def `contrast - call by value` = {

      var sideeffect = 0 // simulate external environment
      // simulate a process which has side-effect and cost time
      def fool(a: Int) = { sideeffect += 1; a }

      def callbyvalue(enabled: Boolean, b: Int) = if (enabled) b * b else -1

      for (index <- 1 to 5) {
        assertResult(-1) { callbyvalue(false, fool(index)) }
      }
      // even result of fool is not used, it still cause side-effect
      assert(sideeffect == 5)
    } //def

    def `contrast - call by name` = {

      var sideeffect = 0 // simulate side-effect
      // simulate a process which cause side-effect and cost time
      def fool(a: Int) = { sideeffect += 1; a }

      // here, b is not a value any more
      // but actually a function which will be lazily evaluated
      // and it is invoked only when necessary
      def callbyname(enabled: Boolean, b: => Int) = if (enabled) b * b else -1

      // argument "b" is a function which will be lazily evaluated
      // no side-effect will be caused when unnecessary
      for (index <- 1 to 5) {
        assertResult(-1)(callbyname(false, fool(index)))
      }
      assertResult(5)(sideeffect)

    } //def

  } //object

}