package test

import org.scalatest.Spec

sealed class TraitTest extends Spec {

  object `demo 1` {
    
    trait Logger {
      def log(msg: String): String
      def info(msg: String) = log("Info: "+msg)
      def warn(msg: String) = log("Warning: "+msg)
      def severe(msg: String) = log("Severe: "+msg)
    }
    
    trait DoNothingLogger extends Logger {
      // no need to use "override" for a abstract member
      def log(msg: String) = ""
    }
    
    trait PassThroughLogger extends Logger {
      // override is optional, you can neglect it
      // however, adding it won't hurt
      override def log(msg: String) = msg
    }
    
    trait IndexedLogger extends Logger {
      private var _counter = 0
      
      override def log(msg: String) = {
        _counter += 1
        s"$_counter - $msg"
      }
    }

  } //object

}