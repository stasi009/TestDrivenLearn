package test

import org.scalatest.Spec

sealed class HighOrderFunctionTest extends Spec {

  sealed abstract class Drawing
  case class Point(x: Int, y: Int) extends Drawing
  case class Circle(p: Point, r: Int) extends Drawing
  case class Cylinder(c: Circle, h: Int) extends Drawing

  object `basic demo` {
    
    def `test andThen` = {
      
      // "point" function cannot be written as "point(x:Int,y:Int)"
      // because only "Function1" (which only accept one argument) has the "andThen" function
      def point(x: (Int,Int)) = Point(x._1,x._2 )
      def circle(r:Int)(p:Point) = Circle(p,r)
      def cylinder(h:Int)(c:Circle) = Cylinder(c,h)
      
      val drawall = (point _) andThen (circle(3) _) andThen (cylinder(9) _)
      val cy = drawall((8,6))
      
      assert(cy.isInstanceOf[Cylinder])
      val Cylinder(Circle(Point(x,y),r),h) = cy
      assert(x==8 && y==6)
      assert(r==3)
      assert(h==9)
      
    }//def

  } //object

}