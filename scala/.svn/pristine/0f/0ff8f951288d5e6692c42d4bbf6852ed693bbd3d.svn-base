package test

import org.scalatest.Spec

sealed class ClassBasicTest extends Spec {
  
  object `getter and setter` {
    
    def `access privilege` = {
      class Fool {
        var defaultVarField
        val defaultValField
        private var privateVarField
      }
    }//def
    
    def `auto generated by compiler` = {
      
      /*
       * the compiler will automatically generate two methods for "var" field
       * value(): for getter
       * value_=(newvalue): for setter
       */
      class Fool {
        var value = 0
      }
      
      val f = new Fool
      assert(f.value  == 0) // call f.value() for getting purpose
      
      f.value = 99 // call f.value_=(99) for setting purpose
      assert(f.value == 99)
      
    }// def
    
    def `redefine getter and setter` = {
      class Person {
        private var _age = 0
        
        // getter
        def age = _age
        
        // setter
        def age_=(newvalue:Int)={
          if (newvalue < _age) throw new IllegalArgumentException
          else _age = newvalue
        }
      }//class
      
      val p = new Person
      p.age = 5
      assert(p.age == 5)
      
      intercept[IllegalArgumentException]{ p.age = 1 }
    }
    
  }//object

}