package test

import org.scalatest.Spec

sealed class ImplicitTest extends Spec {

  sealed class Fraction(n: Int, d: Int) {
    private val _num = n
    private val _den = d
    private val _value = n.toDouble / d.toDouble

    def *(other: Fraction) = new Fraction(_num * other._num, _den * other._den)

    override def equals(other: Any) = {
      if (other.isInstanceOf[Fraction]) {
        val otherfraction = other.asInstanceOf[Fraction]
        (_value - otherfraction._value).abs < 1e-6
      } else false
    }

    override def hashCode = _value.hashCode
  }//class
  
  implicit class RangeMaker(val left: Int) extends AnyVal {
    def -->(right: Int) = left to right
  }
  
  object `demo usage` {
    
    def `test simple double2int` = {
      import common.Utility.double2int
      val n: Int = 8.9
      assert(n == 8)
    }//def
    
  }//object

}