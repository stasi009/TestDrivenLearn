package test

import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.ObjectInputStream
import java.io.ObjectOutputStream
import org.scalatest.Spec

sealed class SerializeTest extends Spec {

  def serializeCopy[T](src: T) = {
    val byteOutStream = new ByteArrayOutputStream
    val objOutStream = new ObjectOutputStream(byteOutStream)
    objOutStream.writeObject(src)

    val byteInStream = new ByteArrayInputStream(byteOutStream.toByteArray)
    val objInStream = new ObjectInputStream(byteInStream)
    val cpy = objInStream.readObject()

    objOutStream.close()
    objInStream.close()

    cpy.asInstanceOf[T]
  } //def

  sealed class ReusableSerializer {
    private val _bytestream = new ByteArrayOutputStream
    private val _objstream = new ObjectOutputStream(_bytestream)

    def close() = _objstream.close()

    def serialize[T](dest: Array[Byte], dstoffset: Int, src: T) = {
      println(src)
      _bytestream.reset()
      _objstream.writeObject(src)

      val bytearray = _bytestream.toByteArray
      bytearray.copyToArray(dest, dstoffset)
      println(bytearray.length)

      dstoffset + bytearray.length
    } //def
  } //class

  object `test basic types` {

    def `test primitive type` = {
      assert(serializeCopy(9) == 9)
      assert(serializeCopy("stasi") == "stasi")
    } //def

    def `test collections` = {

      assert(serializeCopy(Seq(1, 2, 3)) == List(1, 2, 3))

      val srcArray = Array(7, 8, 9)
      val cpyArray = serializeCopy(srcArray)
      assert(srcArray sameElements cpyArray)

    } //def

  } //object

  object `test multiple serialize` {
    val number = 99
    val text = "stasi"
    // val list = Seq(7, 8, 9)

    val bytearray = new Array[Byte](512) // allocate a big-enough byte array
    val serializer = new ReusableSerializer
    var offset = 0
    offset = serializer.serialize(bytearray, offset, number)
    offset = serializer.serialize(bytearray, offset, text)
    // offset = serializer.serialize(bytearray, offset, list)
    println(offset)

    // ----------------- deserialize
    val byteInStream = new ByteArrayInputStream(bytearray)
    val objInStream = new ObjectInputStream(byteInStream)

    val cpynumber = objInStream.readObject()

  } //object
}//class