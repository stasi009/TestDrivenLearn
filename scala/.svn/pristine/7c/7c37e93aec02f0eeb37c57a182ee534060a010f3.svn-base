package common

import scala.annotation.tailrec

object Utility {
  
  // !!! we cannot name both methods as "almost equal"
  // !!! overload and "default arguments" cannot happen at the same time
  def seqAlmostEqual(s1: Seq[Double], s2: Seq[Double], tolerance: Double = 1e-6) = {
    (s1 zip s2) map { t => (t._1 - t._2).abs } forall { _ < tolerance }
  }
  
  def numAlmostEqual(x: Double,y:Double, tolerance: Double=1e-6) = {
    (x - y).abs < tolerance    
  }
  
  def seqLength[T](sq: Seq[T]) = {
    
      @tailrec
      def __length__[T](sq: Seq[T], length: Int): Int = {
        sq match {
          case Nil => length
          case head :: tail => __length__(tail, length + 1)
        } //match
      }
      __length__(sq, 0)
    } //def
  
}//object