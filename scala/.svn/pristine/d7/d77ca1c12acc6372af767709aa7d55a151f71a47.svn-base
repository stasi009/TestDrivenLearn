package test

import org.scalatest.Spec

sealed class FunctionalOperatorsTest extends Spec {

  object `test operators` {
    def `test zip` = {
      // segments can have different length
      // zipped result has the shortest length among segments
      val ids = Seq(1, 2, 3, 4)
      val names = Seq("a", "b", "c")

      assertResult(Seq((1, "a"), (2, "b"), (3, "c")))(ids zip names)
    } //def

    def `test map` = {
      assertResult(Seq("1", "2", "3")) { (1 to 3) map { _.toString } }
    }

    def `test filter` = {
      val actual = (1 to 10) filter { _ % 2 == 0 }
      val expected = Seq(2, 4, 6, 8, 10)
      assertResult(expected)(actual)
    }

    def `test fold 1` = {
      val temp = (sb: StringBuilder, n:Int) => sb += n.toChar
      val r = 1 to 5
      val sbFromLeft = r.foldLeft(new StringBuilder)(temp)
    }

  } //object

}