package test

import org.scalatest.Spec

sealed class SortTest extends Spec {
  
  case class Person(id: Int,name: String)
  
  object `simple demo` {
    
    /*
     * sort with implicit ordering in ascending order
     * also output has the same type as the input
     */
    def `test sorted` = {
      val a = Array(3,2,1)
      val aa= a.sorted
      assert(aa.isInstanceOf[Array[Int]])
      assert(aa sameElements Array(1,2,3))
      
      val b = Seq(3,2,1)
      val bb = b.sorted
      assert(bb.isInstanceOf[Seq[Int]])
      assertResult(Seq(1,2,3))(bb)
    }
    
    def `test sorted by` = {
      val original = Seq(Person(9,"gru"),Person(1,"stasi"),Person(6,"kgb"))
      
      val sortedById = original.sortBy{_.id }
      assert(sortedById == Seq(Person(1,"stasi"),Person(6,"kgb"),Person(9,"gru")))
      
      val sortedByName = original.sortBy(_.name )
      assert(sortedByName == Seq(Person(9,"gru"),Person(6,"kgb"),Person(1,"stasi")))
    }
    
  }

}