package test

import org.scalatest.Spec

sealed class PartialFunctionTest extends Spec {

  object `basic operations` {
    val isEven: PartialFunction[Int, String] = { case x if x % 2 == 0 => x + " is even" }
    val isOdd: PartialFunction[Int, String] = { case x if x % 2 == 1 => x + " is odd" }

    def `demo 1` = {
      assertResult("8 is even")(isEven(8))
      assert(isEven.isDefinedAt(6))

      intercept[MatchError] { isEven(9) }
    } //def

    def `test collect` = {
      val result = (1 to 10) collect isEven
      val expected = (1 to 10) filter { _ % 2 == 0 } map { x => s"$x is even" }
      assertResult(expected)(result)
    }
    
    def `test orElse` = {
      assert(isEven.isDefinedAt(9))
      
      val allfunc = isEven orElse isOdd
    }//def

  } //object

}