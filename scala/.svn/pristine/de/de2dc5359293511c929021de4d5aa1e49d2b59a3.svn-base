package test

import org.scalatest.Spec

sealed class PatternMatchTest2 extends Spec {

  object `match against type` {

    def any2int(obj: Any) = {
      obj match {
        case n: Int => n
        case s: String => s.toInt
        case d: Double => d.round.toInt // round returns Long
        case _ => throw new NotImplementedError
      } //match
    }

    def `demo 1` = {
      assertResult(1)(any2int(1))
      assertResult(101)(any2int("101"))
      assertResult(100)(any2int(99.9))
    } //def

    object `match against collection types` {
      
      def `match against array` = {
        def __fool(array: Array[Int]) = {
          array match {
            case Array(0) => "0"
            case Array(x, y) => s"[$x,$y]"
            case Array(0, _*) => "0, ..."
            case _ => "else"
          } //match
        }

        assertResult(Seq("0", "[0,1]", "0, ...", "[1,2]", "else")) {
          Seq(Array(0), Array(0, 1), Array(0, 1, 2, 3), Array(1, 2), Array(4)) map __fool
        }
      } //def
      
      def `match against list` = {
        def __fool(lst: List[Int]) = {
          case 0::Nil => "0"
          case x::y::Nil => s"[$x,$y]"
          
        }
      }//def
      
    } //object
  }

}