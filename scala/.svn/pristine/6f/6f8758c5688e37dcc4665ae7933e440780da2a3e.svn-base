package test

import org.scalatest.Spec

sealed class SortWithOrderTest extends Spec {
  
  /*
   * Ordered should be used for data with a single, natural ordering (like integers) 
   * while Ordering allows for multiple ordering implementations. 
   * scala.math.Ordering is an alternative to this trait that allows multiple orderings 
   * to be defined for the same type.
   */
  object `demo Ordered trait` {
    case class Person(name: String,age:Int) extends Ordered[Person] {
      // now, the sorting strategy is fixed, Person can only be sorted by age
      override def compare(other: Person) = {age - other.age}
    }
    
    def `test comparing operators` = {
      val p1 = Person("z",9)
      val p2 = Person("a",12)
      assert(p2 < p1)
    }//def
    
  }//object
  
  
  /*
   * difference between Ordered and Ordering is that: 
   * Ordered is a property of the element: if element has "ordered" property, then it can be sorted
   * Ordering is a strategy. Even the element doesn't have "ordered" property, we can design a strategy
   * to sort them, or, develop several sorting strategy
   * 
   * ordered is static: when the element type is fixed, its Ordered property is also fixed
   * each item type can only have one Ordered property
   * 
   * Ordering is dynamic, which is detached from the element type. 
   * one element type can have several different Ordering strategy, and can be switched at runtime
   */
  object `demo Ordering trait` {}//object
  

}