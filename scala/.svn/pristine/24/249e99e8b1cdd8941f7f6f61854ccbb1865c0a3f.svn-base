package demo

import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.ObjectInputStream
import java.io.ObjectOutputStream

object SerializeDemo extends App {

  def serialize(src: Any) = {
    val byteOutStream = new ByteArrayOutputStream
    val objOutStream = new ObjectOutputStream(byteOutStream)
    objOutStream.writeObject(src)
    byteOutStream.toByteArray
  } //def

  def serializeArray() = {
    val src = Array(1 to 1000: _*)
    val bytearray = serialize(src)
    println(s"${src.length} integers serialize to ${bytearray.length} bytes")

    // each integer occupies 4 bytes
    val expected = 4 * src.length + 27
    assert(bytearray.length == expected)
  } //def

  // inspect the size after the serialization
  def checkSize() = {
    println("---------------- integers")
    val intarray = Array(1, 10, 100, 1000, 10000, 11, 345, 87368)
    for (i <- intarray) {
      val bytearray = serialize(i)
      println(s"$i: ${bytearray.length} bytes")
    } //for

    println("---------------- strings")
    val strarray = Array("a", "bcd", "xyzekd")
    for (s <- strarray) {
      val bytearray = serialize(s)
      println(s"$s: ${s.length} characters, ${bytearray.length} bytes")
    } //for
  }

  override def main(args: Array[String]) = {
    // serializeArray()
    checkSize()
  } //def

}